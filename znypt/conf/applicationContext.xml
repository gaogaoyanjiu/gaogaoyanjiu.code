<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 读取jdbc属性文件 -->
<!-- 	<context:property-placeholder location="classpath:jdbc.properties" />

	数据源
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${driverClass}"></property>
		<property name="jdbcUrl" value="${jdbcUrl}"></property>
		<property name="user" value="${user}"></property>
		<property name="password" value="${password}"></property>
	</bean>

	配置LocalSessionFactoryBean
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		注入hibernate的映射文件
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:cn/itcast/bos/domain</value>
			</list>
		</property>
	</bean>

	配置事务管理器
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	组件扫描
	<context:component-scan base-package="cn/itcast/bos"></context:component-scan>
	支持注解
	<context:annotation-config />
	事务注解
	<tx:annotation-driven transaction-manager="transactionManager" />


	配置远程服务的代理对象
	<bean id="customerService"
		class="org.springframework.remoting.caucho.HessianProxyFactoryBean">
		注入类型接口
		<property name="serviceInterface" value="cn.itcast.crm.domain.CustomerService" />
		注入服务访问地址
		<property name="serviceUrl" value="http://localhost:8080/crm/remoting/customer" />
	</bean>

	配置shiro框架的过滤器
	Shiro Filter
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		注入系统登录页面
		<property name="loginUrl" value="/login.jsp" />
		注入成功页面
		<property name="successUrl" value="/index.jsp" />
		注入权限不足页面
		<property name="unauthorizedUrl" value="/unauthorized.jsp" />
		指定URL权限控制
		<property name="filterChainDefinitions">
			<value>
				/css/** = anon
				/js/** = anon
				/images/** = anon
				/validatecode.jsp* = anon
				/login.jsp* = anon
				/userAction_login.action= anon
				/page_base_staff.action =　perms["staff"]
				/**= authc
			</value>
		</property>
	</bean>

	注册一个安全管理器
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		注入realm
		<property name="realm" ref="bosRealm" />
		注入缓存管理器
		<property name="cacheManager" ref="cacheManager" />
	</bean>
	注册一个缓存管理器
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		注入ehcache配置文件
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />
	</bean>

	注册自定义realm
	<bean id="bosRealm" class="cn.itcast.bos.shiro.BosRealm">
	</bean>

	开启shiro注解支持
	自动代理
	<bean id="defaultAdvisorAutoProxyCreator"
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
		强制使用cglib创建action的代理, 不 配置，spring默认是使用JDK代理, 默认情况下，action有接口就会使用ＪＤＫ代理
		<property name="proxyTargetClass" value="true"></property>
	</bean>

	切面类
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"></bean>


	流程引擎配置对象
	<bean id="processEngineConfiguration" 
		class="org.activiti.spring.SpringProcessEngineConfiguration">
		注入数据源对象
		<property name="dataSource" ref="dataSource"/>
		注入事务管理器
		<property name="transactionManager" ref="transactionManager"/>
		自动建表配置
		<property name="databaseSchemaUpdate" value="true"/>
	</bean>

	提供流程引擎工厂bean，用于创建流程引擎对象
	<bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
		<property name="processEngineConfiguration" ref="processEngineConfiguration"/>
	</bean>
	
	创建activiti的Service对象
	
	repositoryService 操作静态的资源表，部署表、流程定义表、二进制表
	<bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService"></bean>
	runtimeService 操作动态信息表，流程实例表、任务表、流程变量表
	<bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService"></bean>
	taskService 操作任务信息，任务表
	<bean id="taskService" factory-bean="processEngine" factory-method="getTaskService"></bean>
	identityService 操作用户表、组表、关系表
	<bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService"></bean>
	HistoryService操作历史信息表
	<bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService"></bean>
	 -->
	
</beans>
